from django.db import models
from django.utils import timezone
from dateutil.relativedelta import relativedelta


class Device(models.Model):
    # –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    STATUS_NOT_CHANGED = 'not_changed'
    STATUS_WITH_WARRANTY = 'with_warranty'
    STATUS_WARRANTY_USED = 'warranty_used'
    STATUS_WITHOUT_WARRANTY = 'without_warranty'

    PART_STATUS_CHOICES = [
        (STATUS_NOT_CHANGED, '‚ùå –ù–µ –º–µ–Ω—è–ª–æ—Å—å'),
        (STATUS_WITH_WARRANTY, '‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ (–≥–∞—Ä–∞–Ω—Ç–∏—è)'),
        (STATUS_WARRANTY_USED, '‚ö†Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞'),
        (STATUS_WITHOUT_WARRANTY, 'üîß –ë–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏'),
    ]

    # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    is_used = models.BooleanField("–ü—Ä–æ—Å—Ä–æ—á–∫–∞/–ò–°–ü", default=False)
    where = models.CharField("–≥–¥–µ", max_length=5, null=True, blank=True,
                             choices=(("–¶–£–ú", "–¶–£–ú"), ("–ì–£–ú", "–ì–£–ú")))
    name = models.CharField("–§–ò–û", max_length=255, null=True, blank=True)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=255, null=True, blank=True)
    date = models.DateTimeField("–î–∞—Ç–∞", null=True, blank=True)
    model = models.CharField("–ú–æ–¥–µ–ª—å", max_length=255, null=True, blank=True)
    price = models.CharField("–¶–µ–Ω–∞", max_length=255, null=True, blank=True)

    # --- –≠–ö–†–ê–ù ---
    display_status = models.CharField(
        "–≠–∫—Ä–∞–Ω",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    display_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    display_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    # --- –ö–û–†–ü–£–° ---
    case_status = models.CharField(
        "–ö–æ—Ä–ø—É—Å",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    case_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    case_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    # --- –ö–†–´–®–ö–ê ---
    cover_status = models.CharField(
        "–ö—Ä—ã—à–∫–∞",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    cover_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    cover_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    # --- 360 ---
    general_360_status = models.CharField(
        "360 (–ø–æ–ª–Ω–∞—è –æ–∫–ª–µ–π–∫–∞)",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    general_360_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    general_360_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    # --- –ë–û–ö–û–í–ê–Ø –ß–ê–°–¢–¨ ---
    side_status = models.CharField(
        "–ë–æ–∫–æ–≤–∞—è —á–∞—Å—Ç—å",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    side_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    side_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    # --- –õ–ò–ù–ó–´ ---
    lens_status = models.CharField(
        "–õ–∏–Ω–∑—ã",
        max_length=20,
        choices=PART_STATUS_CHOICES,
        default=STATUS_NOT_CHANGED
    )
    lens_warranty_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)
    lens_used_date = models.DateField("–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏", null=True, blank=True)

    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True, null=True, blank=True)

    def save(self, *args, **kwargs):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:
        - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–∫–ª–µ–π–∫–∞ (360), —Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç—É—Å.
        - –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "—Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π" ‚Üí +1 –≥–æ–¥.
        - –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–≥–∞—Ä–∞–Ω—Ç–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞" ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –¥–∞—Ç–∞.
        """
        today = timezone.now().date()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        old_instance = None
        if self.pk:
            try:
                old_instance = Device.objects.get(pk=self.pk)
            except Device.DoesNotExist:
                pass

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π
        parts = [
            ('display_status', 'display_warranty_date', 'display_used_date'),
            ('case_status', 'case_warranty_date', 'case_used_date'),
            ('cover_status', 'cover_warranty_date', 'cover_used_date'),
            ('general_360_status', 'general_360_warranty_date', 'general_360_used_date'),
            ('side_status', 'side_warranty_date', 'side_used_date'),
            ('lens_status', 'lens_warranty_date', 'lens_used_date'),
        ]

        # 1Ô∏è‚É£ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "360", –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ –≤—Å–µ–º –¥–µ—Ç–∞–ª—è–º
        if self.general_360_status != self.STATUS_NOT_CHANGED:
            for field, _, _ in parts:
                if field != 'general_360_status':
                    setattr(self, field, self.general_360_status)

        # 2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å
        for status_field, warranty_field, used_field in parts:
            status = getattr(self, status_field)

            if status == self.STATUS_WITH_WARRANTY:
                if not getattr(self, warranty_field):
                    setattr(self, warranty_field, today + relativedelta(years=1))
                setattr(self, used_field, None)

            elif status == self.STATUS_WARRANTY_USED:
                if not getattr(self, used_field):
                    setattr(self, used_field, today)

            elif status in [self.STATUS_NOT_CHANGED, self.STATUS_WITHOUT_WARRANTY]:
                setattr(self, warranty_field, None)
                if status == self.STATUS_NOT_CHANGED:
                    setattr(self, used_field, None)

        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.phone} ({self.model})"

    class Meta:
        verbose_name = "–ö–ª–∏–µ–Ω—Ç"
        verbose_name_plural = "–ö–ª–∏–µ–Ω—Ç—ã"