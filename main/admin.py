from django.contrib import admin
from django.contrib.auth.models import User, Group
from django import forms
from django.utils.html import format_html
from .models import Device

admin.site.unregister(User)
admin.site.unregister(Group)


class DeviceAdminForm(forms.ModelForm):
    class Meta:
        model = Device
        fields = '__all__'
        widgets = {
            # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ (–∫—Ä–∞—Å–∏–≤—ã–µ select)
            'display_status': forms.Select(attrs={'class': 'status-select'}),
            'case_status': forms.Select(attrs={'class': 'status-select'}),
            'cover_status': forms.Select(attrs={'class': 'status-select'}),
            'general_360_status': forms.Select(attrs={'class': 'status-select'}),
            'side_status': forms.Select(attrs={'class': 'status-select'}),
            'lens_status': forms.Select(attrs={'class': 'status-select'}),
        }


@admin.register(Device)
class DeviceAdmin(admin.ModelAdmin):
    form = DeviceAdminForm

    list_display = [
        'where', 'name', 'phone', 'date', 'model',
        'display_status_display', 'case_status_display',
        'cover_status_display', 'general_360_status_display',
        'side_status_display', 'lens_status_display',
        'price', 'is_used'
    ]
    list_display_links = ['where', 'name', 'phone', 'date', 'model']
    list_filter = ('where', 'date', 'display_status', 'case_status')
    search_fields = ['name', 'phone', 'model']

    readonly_fields = (
        "display_warranty_date",
        "display_used_date",
        "case_warranty_date",
        "case_used_date",
        "cover_warranty_date",
        "cover_used_date",
        "general_360_warranty_date",
        "general_360_used_date",
        "side_warranty_date",
        "side_used_date",
        "lens_warranty_date",
        "lens_used_date",
        "created_at",
    )

    fieldsets = (
        ("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": (
                "is_used",
                "where",
                "name",
                "phone",
                "date",
                "model",
                "price",
            )
        }),
        ("–î–µ—Ç–∞–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞ / –≥–∞—Ä–∞–Ω—Ç–∏–π", {
            "fields": (
                ("display_status", "display_warranty_date", "display_used_date"),
                ("case_status", "case_warranty_date", "case_used_date"),
                ("cover_status", "cover_warranty_date", "cover_used_date"),
                ("general_360_status", "general_360_warranty_date", "general_360_used_date"),
                ("side_status", "side_warranty_date", "side_used_date"),
                ("lens_status", "lens_warranty_date", "lens_used_date"),
            ),
            "classes": ("wide", "repair-details-section"),
            "description": "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ '–ó–∞–º–µ–Ω–µ–Ω–æ (–≥–∞—Ä–∞–Ω—Ç–∏—è)' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏."
        }),
        ("–°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("created_at",),
        }),
    )

    class Media:
        css = {
            'all': ('admin/css/repair_details_simple.css',)
        }
        js = ('admin/js/warranty_simple.js',)

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    def display_status_display(self, obj):
        return self._get_status_badge(obj.display_status)

    display_status_display.short_description = "–≠–∫—Ä–∞–Ω"

    def case_status_display(self, obj):
        return self._get_status_badge(obj.case_status)

    case_status_display.short_description = "–ö–æ—Ä–ø—É—Å"

    def cover_status_display(self, obj):
        return self._get_status_badge(obj.cover_status)

    cover_status_display.short_description = "–ö—Ä—ã—à–∫–∞"

    def general_360_status_display(self, obj):
        return self._get_status_badge(obj.general_360_status)

    general_360_status_display.short_description = "360"

    def side_status_display(self, obj):
        return self._get_status_badge(obj.side_status)

    side_status_display.short_description = "–ë–æ–∫–æ–≤–∞—è"

    def lens_status_display(self, obj):
        return self._get_status_badge(obj.lens_status)

    lens_status_display.short_description = "–õ–∏–Ω–∑—ã"

    def _get_status_badge(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π badge –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        badges = {
            'not_changed': '<span style="color: #6c757d;">‚ùå</span>',
            'with_warranty': '<span style="color: #28a745; font-weight: bold;">‚úÖ</span>',
            'warranty_used': '<span style="color: #ffc107; font-weight: bold;">‚ö†Ô∏è</span>',
            'without_warranty': '<span style="color: #007bff;">üîß</span>',
        }
        return format_html(badges.get(status, status))

    def get_form(self, request, obj=None, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –ø–æ–ª—è–º"""
        form = super().get_form(request, obj, **kwargs)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞
        status_help = {
            'display_status': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —ç–∫—Ä–∞–Ω–∞. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ó–∞–º–µ–Ω–µ–Ω–æ (–≥–∞—Ä–∞–Ω—Ç–∏—è)" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ä–æ–∫ –Ω–∞ 1 –≥–æ–¥.',
            'case_status': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–ø—É—Å–∞.',
            'cover_status': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫—Ä—ã—à–∫–∏.',
            'general_360_status': '–ü–æ–ª–Ω–∞—è –æ–∫–ª–µ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å.',
            'side_status': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ–∫–æ–≤–æ–π —á–∞—Å—Ç–∏.',
            'lens_status': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ª–∏–Ω–∑.',
        }

        for field_name, help_text in status_help.items():
            if field_name in form.base_fields:
                form.base_fields[field_name].help_text = help_text

        return form